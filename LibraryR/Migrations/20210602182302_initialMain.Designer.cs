// <auto-generated />
using System;
using LibraryR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryR.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210602182302_initialMain")]
    partial class initialMain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<string>("BooksUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuthorsId", "AuthorsUserId", "BooksId", "BooksUserId");

                    b.HasIndex("BooksId", "BooksUserId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("LibraryR.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BornYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "UserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryR.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id", "UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryR.Models.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectRole");
                });

            modelBuilder.Entity("LibraryR.Models.Record", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId", "UserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("LibraryR.Models.StatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Readed"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Reading it"
                        },
                        new
                        {
                            Id = 3,
                            Type = "To read"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("LibraryR.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId", "AuthorsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryR.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId", "BooksUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
